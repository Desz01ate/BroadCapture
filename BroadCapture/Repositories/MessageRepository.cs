// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a ModelGenerator.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using BroadCapture.Repositories.Based;
using BroadCapture.Models;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Linq;
using RDapter.Extends;

namespace BroadCapture.Repositories
{
    ///<summary>
    /// Data contractor for Message
    ///</summary>
    public partial class MessageRepository : Repository<Message>
    {
        private int TotalMessages = -1;
        private readonly DatabaseContext Service;
        public MessageRepository(DatabaseContext service) : base(service.OnlineConnection)
        {
            this.Service = service;
            this.TotalMessages = this.Count();
        }
        public override void Insert(Message data)
        {
            TotalMessages += 1;
            Service.OfflineConnection.Insert(data);
            base.Insert(data);
        }
        public override Task InsertAsync(Message data)
        {
            TotalMessages += 1;
            Service.OfflineConnection.Insert(data);
            return base.InsertAsync(data);
        }
        public override void InsertMany(IEnumerable<Message> data)
        {
            TotalMessages += data.Count();
            Service.OfflineConnection.InsertMany(data);
            base.InsertMany(data);
        }
        public override Task InsertManyAsync(IEnumerable<Message> data)
        {
            TotalMessages += data.Count();
            Service.OfflineConnection.InsertMany(data);
            return base.InsertManyAsync(data);
        }
        public override int Count()
        {
            if (TotalMessages == -1)
            {
                TotalMessages = base.Count();
            }
            return TotalMessages;
        }
    }
}

